// Generated by Dagger (https://dagger.dev).
package com.androidpoet.currencyconverter.di;

import com.androidpoet.domain.CurrenciesRepository;
import com.androidpoet.domain.usecase.UseCaseLoadCurrenciesDataFromNetwork;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideUseCaseLoadCurrenciesDataFactory implements Factory<UseCaseLoadCurrenciesDataFromNetwork> {
  private final UseCaseModule module;

  private final Provider<CurrenciesRepository> currenciesRepositoryProvider;

  public UseCaseModule_ProvideUseCaseLoadCurrenciesDataFactory(UseCaseModule module,
      Provider<CurrenciesRepository> currenciesRepositoryProvider) {
    this.module = module;
    this.currenciesRepositoryProvider = currenciesRepositoryProvider;
  }

  @Override
  public UseCaseLoadCurrenciesDataFromNetwork get() {
    return provideUseCaseLoadCurrenciesData(module, currenciesRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideUseCaseLoadCurrenciesDataFactory create(UseCaseModule module,
      Provider<CurrenciesRepository> currenciesRepositoryProvider) {
    return new UseCaseModule_ProvideUseCaseLoadCurrenciesDataFactory(module, currenciesRepositoryProvider);
  }

  public static UseCaseLoadCurrenciesDataFromNetwork provideUseCaseLoadCurrenciesData(
      UseCaseModule instance, CurrenciesRepository currenciesRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideUseCaseLoadCurrenciesData(currenciesRepository));
  }
}
