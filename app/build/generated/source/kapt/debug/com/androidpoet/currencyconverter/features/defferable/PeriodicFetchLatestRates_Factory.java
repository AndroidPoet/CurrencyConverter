// Generated by Dagger (https://dagger.dev).
package com.androidpoet.currencyconverter.features.defferable;

import android.content.Context;
import androidx.work.WorkerParameters;
import com.androidpoet.domain.usecase.UseCaseLoadCurrenciesDataFromNetwork;
import com.androidpoet.domain.usecase.UseCaseLoadLatestPricesFromNetwork;
import dagger.internal.DaggerGenerated;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PeriodicFetchLatestRates_Factory {
  private final Provider<UseCaseLoadLatestPricesFromNetwork> useCaseFetchLatestPricesProvider;

  private final Provider<UseCaseLoadCurrenciesDataFromNetwork> useCaseLoadCurrenciesDataFromNetworkProvider;

  public PeriodicFetchLatestRates_Factory(
      Provider<UseCaseLoadLatestPricesFromNetwork> useCaseFetchLatestPricesProvider,
      Provider<UseCaseLoadCurrenciesDataFromNetwork> useCaseLoadCurrenciesDataFromNetworkProvider) {
    this.useCaseFetchLatestPricesProvider = useCaseFetchLatestPricesProvider;
    this.useCaseLoadCurrenciesDataFromNetworkProvider = useCaseLoadCurrenciesDataFromNetworkProvider;
  }

  public PeriodicFetchLatestRates get(Context appContext, WorkerParameters workerParams) {
    return newInstance(appContext, workerParams, useCaseFetchLatestPricesProvider.get(), useCaseLoadCurrenciesDataFromNetworkProvider.get());
  }

  public static PeriodicFetchLatestRates_Factory create(
      Provider<UseCaseLoadLatestPricesFromNetwork> useCaseFetchLatestPricesProvider,
      Provider<UseCaseLoadCurrenciesDataFromNetwork> useCaseLoadCurrenciesDataFromNetworkProvider) {
    return new PeriodicFetchLatestRates_Factory(useCaseFetchLatestPricesProvider, useCaseLoadCurrenciesDataFromNetworkProvider);
  }

  public static PeriodicFetchLatestRates newInstance(Context appContext,
      WorkerParameters workerParams, UseCaseLoadLatestPricesFromNetwork useCaseFetchLatestPrices,
      UseCaseLoadCurrenciesDataFromNetwork useCaseLoadCurrenciesDataFromNetwork) {
    return new PeriodicFetchLatestRates(appContext, workerParams, useCaseFetchLatestPrices, useCaseLoadCurrenciesDataFromNetwork);
  }
}
