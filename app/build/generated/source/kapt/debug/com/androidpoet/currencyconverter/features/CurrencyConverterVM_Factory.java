// Generated by Dagger (https://dagger.dev).
package com.androidpoet.currencyconverter.features;

import com.androidpoet.domain.NetworkInfoProvider;
import com.androidpoet.domain.usecase.UseCaseFetchCurrencies;
import com.androidpoet.domain.usecase.UseCaseFetchLatestPrices;
import com.androidpoet.domain.usecase.UseCaseLoadCurrenciesDataFromNetwork;
import com.androidpoet.domain.usecase.UseCaseLoadLatestPricesFromNetwork;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CurrencyConverterVM_Factory implements Factory<CurrencyConverterVM> {
  private final Provider<UseCaseLoadCurrenciesDataFromNetwork> useCaseLoadCurrenciesDataFromNetworkProvider;

  private final Provider<UseCaseLoadLatestPricesFromNetwork> useCaseLoadLatestPricesFromNetworkProvider;

  private final Provider<UseCaseFetchLatestPrices> useCaseFetchLatestPricesProvider;

  private final Provider<UseCaseFetchCurrencies> useCaseFetchCurrenciesProvider;

  private final Provider<NetworkInfoProvider> networkInfoProvider;

  public CurrencyConverterVM_Factory(
      Provider<UseCaseLoadCurrenciesDataFromNetwork> useCaseLoadCurrenciesDataFromNetworkProvider,
      Provider<UseCaseLoadLatestPricesFromNetwork> useCaseLoadLatestPricesFromNetworkProvider,
      Provider<UseCaseFetchLatestPrices> useCaseFetchLatestPricesProvider,
      Provider<UseCaseFetchCurrencies> useCaseFetchCurrenciesProvider,
      Provider<NetworkInfoProvider> networkInfoProvider) {
    this.useCaseLoadCurrenciesDataFromNetworkProvider = useCaseLoadCurrenciesDataFromNetworkProvider;
    this.useCaseLoadLatestPricesFromNetworkProvider = useCaseLoadLatestPricesFromNetworkProvider;
    this.useCaseFetchLatestPricesProvider = useCaseFetchLatestPricesProvider;
    this.useCaseFetchCurrenciesProvider = useCaseFetchCurrenciesProvider;
    this.networkInfoProvider = networkInfoProvider;
  }

  @Override
  public CurrencyConverterVM get() {
    return newInstance(useCaseLoadCurrenciesDataFromNetworkProvider.get(), useCaseLoadLatestPricesFromNetworkProvider.get(), useCaseFetchLatestPricesProvider.get(), useCaseFetchCurrenciesProvider.get(), networkInfoProvider.get());
  }

  public static CurrencyConverterVM_Factory create(
      Provider<UseCaseLoadCurrenciesDataFromNetwork> useCaseLoadCurrenciesDataFromNetworkProvider,
      Provider<UseCaseLoadLatestPricesFromNetwork> useCaseLoadLatestPricesFromNetworkProvider,
      Provider<UseCaseFetchLatestPrices> useCaseFetchLatestPricesProvider,
      Provider<UseCaseFetchCurrencies> useCaseFetchCurrenciesProvider,
      Provider<NetworkInfoProvider> networkInfoProvider) {
    return new CurrencyConverterVM_Factory(useCaseLoadCurrenciesDataFromNetworkProvider, useCaseLoadLatestPricesFromNetworkProvider, useCaseFetchLatestPricesProvider, useCaseFetchCurrenciesProvider, networkInfoProvider);
  }

  public static CurrencyConverterVM newInstance(
      UseCaseLoadCurrenciesDataFromNetwork useCaseLoadCurrenciesDataFromNetwork,
      UseCaseLoadLatestPricesFromNetwork useCaseLoadLatestPricesFromNetwork,
      UseCaseFetchLatestPrices useCaseFetchLatestPrices,
      UseCaseFetchCurrencies useCaseFetchCurrencies, NetworkInfoProvider networkInfoProvider) {
    return new CurrencyConverterVM(useCaseLoadCurrenciesDataFromNetwork, useCaseLoadLatestPricesFromNetwork, useCaseFetchLatestPrices, useCaseFetchCurrencies, networkInfoProvider);
  }
}
