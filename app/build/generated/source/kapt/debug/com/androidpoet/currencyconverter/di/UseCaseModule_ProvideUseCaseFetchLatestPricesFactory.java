// Generated by Dagger (https://dagger.dev).
package com.androidpoet.currencyconverter.di;

import com.androidpoet.domain.LatestPricesRepository;
import com.androidpoet.domain.usecase.UseCaseFetchLatestPrices;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideUseCaseFetchLatestPricesFactory implements Factory<UseCaseFetchLatestPrices> {
  private final UseCaseModule module;

  private final Provider<LatestPricesRepository> latestPricesRepositoryProvider;

  public UseCaseModule_ProvideUseCaseFetchLatestPricesFactory(UseCaseModule module,
      Provider<LatestPricesRepository> latestPricesRepositoryProvider) {
    this.module = module;
    this.latestPricesRepositoryProvider = latestPricesRepositoryProvider;
  }

  @Override
  public UseCaseFetchLatestPrices get() {
    return provideUseCaseFetchLatestPrices(module, latestPricesRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideUseCaseFetchLatestPricesFactory create(UseCaseModule module,
      Provider<LatestPricesRepository> latestPricesRepositoryProvider) {
    return new UseCaseModule_ProvideUseCaseFetchLatestPricesFactory(module, latestPricesRepositoryProvider);
  }

  public static UseCaseFetchLatestPrices provideUseCaseFetchLatestPrices(UseCaseModule instance,
      LatestPricesRepository latestPricesRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideUseCaseFetchLatestPrices(latestPricesRepository));
  }
}
