// Generated by Dagger (https://dagger.dev).
package com.androidpoet.currencyconverter.di;

import android.content.Context;
import android.net.ConnectivityManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideConnectivityManagerFactory implements Factory<ConnectivityManager> {
  private final DataModule module;

  private final Provider<Context> contextProvider;

  public DataModule_ProvideConnectivityManagerFactory(DataModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public ConnectivityManager get() {
    return provideConnectivityManager(module, contextProvider.get());
  }

  public static DataModule_ProvideConnectivityManagerFactory create(DataModule module,
      Provider<Context> contextProvider) {
    return new DataModule_ProvideConnectivityManagerFactory(module, contextProvider);
  }

  public static ConnectivityManager provideConnectivityManager(DataModule instance,
      Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideConnectivityManager(context));
  }
}
