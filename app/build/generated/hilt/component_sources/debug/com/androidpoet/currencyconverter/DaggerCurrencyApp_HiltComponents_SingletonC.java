// Generated by Dagger (https://dagger.dev).
package com.androidpoet.currencyconverter;

import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.net.ConnectivityManager;
import android.view.View;
import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWorkerFactory;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.hilt.work.WorkerAssistedFactory;
import androidx.hilt.work.WorkerFactoryModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.work.ListenableWorker;
import androidx.work.WorkerParameters;
import com.androidpoet.currencyconverter.di.DataModule;
import com.androidpoet.currencyconverter.di.DataModule_Companion_ProvidesNetworkJsonFactory;
import com.androidpoet.currencyconverter.di.DataModule_ProvideCCDatabaseFactory;
import com.androidpoet.currencyconverter.di.DataModule_ProvideConnectivityManagerFactory;
import com.androidpoet.currencyconverter.di.DataModule_ProvideCoroutineContextFactory;
import com.androidpoet.currencyconverter.di.DataModule_ProvideDataStoreFactory;
import com.androidpoet.currencyconverter.di.DataModule_ProvideNetworkClientFactory;
import com.androidpoet.currencyconverter.di.UseCaseModule;
import com.androidpoet.currencyconverter.di.UseCaseModule_ProvideUseCaseFetchCurrenciesFactory;
import com.androidpoet.currencyconverter.di.UseCaseModule_ProvideUseCaseFetchLatestPricesFactory;
import com.androidpoet.currencyconverter.di.UseCaseModule_ProvideUseCaseLoadCurrenciesDataFactory;
import com.androidpoet.currencyconverter.di.UseCaseModule_ProvideUseCaseloadLatestPricesFactory;
import com.androidpoet.currencyconverter.features.CurrencyConverterVM;
import com.androidpoet.currencyconverter.features.CurrencyConverterVM_HiltModules_KeyModule_ProvideFactory;
import com.androidpoet.currencyconverter.features.defferable.PeriodicFetchLatestRates;
import com.androidpoet.currencyconverter.features.defferable.PeriodicFetchLatestRates_AssistedFactory;
import com.androidpoet.data.local.CCDatabase;
import com.androidpoet.data.local.CurrenciesLocalSourceImpl;
import com.androidpoet.data.network.CurrencyAPI;
import com.androidpoet.data.network.CurrencyAPIImpl;
import com.androidpoet.data.repo.CurrenciesRepositoryImpl;
import com.androidpoet.data.repo.LatestPricesRepositoryImpl;
import com.androidpoet.domain.CurrenciesLocalSource;
import com.androidpoet.domain.CurrenciesRepository;
import com.androidpoet.domain.LatestPricesRepository;
import com.androidpoet.domain.NetworkInfoProvider;
import com.androidpoet.domain.usecase.UseCaseFetchCurrencies;
import com.androidpoet.domain.usecase.UseCaseFetchLatestPrices;
import com.androidpoet.domain.usecase.UseCaseLoadCurrenciesDataFromNetwork;
import com.androidpoet.domain.usecase.UseCaseLoadLatestPricesFromNetwork;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import io.ktor.client.HttpClient;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlin.coroutines.CoroutineContext;
import kotlinx.serialization.json.Json;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCurrencyApp_HiltComponents_SingletonC {
  private DaggerCurrencyApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private DataModule dataModule;

    private UseCaseModule useCaseModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public Builder useCaseModule(UseCaseModule useCaseModule) {
      this.useCaseModule = Preconditions.checkNotNull(useCaseModule);
      return this;
    }

    public CurrencyApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (useCaseModule == null) {
        this.useCaseModule = new UseCaseModule();
      }
      return new SingletonCImpl(applicationContextModule, dataModule, useCaseModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements CurrencyApp_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public CurrencyApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements CurrencyApp_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public CurrencyApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements CurrencyApp_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public CurrencyApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements CurrencyApp_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public CurrencyApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements CurrencyApp_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public CurrencyApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements CurrencyApp_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public CurrencyApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements CurrencyApp_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public CurrencyApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends CurrencyApp_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends CurrencyApp_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends CurrencyApp_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends CurrencyApp_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>singleton(CurrencyConverterVM_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends CurrencyApp_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<CurrencyConverterVM> currencyConverterVMProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.currencyConverterVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>singletonMap("com.androidpoet.currencyconverter.features.CurrencyConverterVM", ((Provider) currencyConverterVMProvider));
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.androidpoet.currencyconverter.features.CurrencyConverterVM 
          return (T) new CurrencyConverterVM(singletonCImpl.provideUseCaseLoadCurrenciesDataProvider.get(), singletonCImpl.provideUseCaseloadLatestPricesProvider.get(), singletonCImpl.provideUseCaseFetchLatestPricesProvider.get(), singletonCImpl.provideUseCaseFetchCurrenciesProvider.get(), singletonCImpl.provideNetworkInfoProviderImplProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends CurrencyApp_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends CurrencyApp_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends CurrencyApp_HiltComponents.SingletonC {
    private final UseCaseModule useCaseModule;

    private final DataModule dataModule;

    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<CoroutineContext> provideCoroutineContextProvider;

    private Provider<HttpClient> provideNetworkClientProvider;

    private Provider<CurrencyAPIImpl> currencyAPIImplProvider;

    private Provider<CurrencyAPI> provideCurrencyApiProvider;

    private Provider<CCDatabase> provideCCDatabaseProvider;

    private Provider<DataStore<Preferences>> provideDataStoreProvider;

    private Provider<Json> providesNetworkJsonProvider;

    private Provider<CurrenciesLocalSourceImpl> currenciesLocalSourceImplProvider;

    private Provider<CurrenciesLocalSource> provideCurrenciesLocalSourceProvider;

    private Provider<LatestPricesRepositoryImpl> latestPricesRepositoryImplProvider;

    private Provider<LatestPricesRepository> provideLatestPricesRepositoryProvider;

    private Provider<UseCaseLoadLatestPricesFromNetwork> provideUseCaseloadLatestPricesProvider;

    private Provider<CurrenciesRepositoryImpl> currenciesRepositoryImplProvider;

    private Provider<CurrenciesRepository> provideCurrenciesRepositoryProvider;

    private Provider<UseCaseLoadCurrenciesDataFromNetwork> provideUseCaseLoadCurrenciesDataProvider;

    private Provider<PeriodicFetchLatestRates_AssistedFactory> periodicFetchLatestRates_AssistedFactoryProvider;

    private Provider<UseCaseFetchLatestPrices> provideUseCaseFetchLatestPricesProvider;

    private Provider<UseCaseFetchCurrencies> provideUseCaseFetchCurrenciesProvider;

    private Provider<ConnectivityManager> provideConnectivityManagerProvider;

    private Provider<NetworkInfoProviderImpl> networkInfoProviderImplProvider;

    private Provider<NetworkInfoProvider> provideNetworkInfoProviderImplProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam,
        DataModule dataModuleParam, UseCaseModule useCaseModuleParam) {
      this.useCaseModule = useCaseModuleParam;
      this.dataModule = dataModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam, dataModuleParam, useCaseModuleParam);

    }

    private Map<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>> mapOfStringAndProviderOfWorkerAssistedFactoryOf(
        ) {
      return Collections.<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>>singletonMap("com.androidpoet.currencyconverter.features.defferable.PeriodicFetchLatestRates", ((Provider) periodicFetchLatestRates_AssistedFactoryProvider));
    }

    private HiltWorkerFactory hiltWorkerFactory() {
      return WorkerFactoryModule_ProvideFactoryFactory.provideFactory(mapOfStringAndProviderOfWorkerAssistedFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam,
        final DataModule dataModuleParam, final UseCaseModule useCaseModuleParam) {
      this.provideCoroutineContextProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineContext>(singletonCImpl, 3));
      this.provideNetworkClientProvider = DoubleCheck.provider(new SwitchingProvider<HttpClient>(singletonCImpl, 5));
      this.currencyAPIImplProvider = new SwitchingProvider<>(singletonCImpl, 4);
      this.provideCurrencyApiProvider = DoubleCheck.provider((Provider) currencyAPIImplProvider);
      this.provideCCDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<CCDatabase>(singletonCImpl, 7));
      this.provideDataStoreProvider = DoubleCheck.provider(new SwitchingProvider<DataStore<Preferences>>(singletonCImpl, 8));
      this.providesNetworkJsonProvider = DoubleCheck.provider(new SwitchingProvider<Json>(singletonCImpl, 9));
      this.currenciesLocalSourceImplProvider = new SwitchingProvider<>(singletonCImpl, 6);
      this.provideCurrenciesLocalSourceProvider = DoubleCheck.provider((Provider) currenciesLocalSourceImplProvider);
      this.latestPricesRepositoryImplProvider = new SwitchingProvider<>(singletonCImpl, 2);
      this.provideLatestPricesRepositoryProvider = DoubleCheck.provider((Provider) latestPricesRepositoryImplProvider);
      this.provideUseCaseloadLatestPricesProvider = DoubleCheck.provider(new SwitchingProvider<UseCaseLoadLatestPricesFromNetwork>(singletonCImpl, 1));
      this.currenciesRepositoryImplProvider = new SwitchingProvider<>(singletonCImpl, 11);
      this.provideCurrenciesRepositoryProvider = DoubleCheck.provider((Provider) currenciesRepositoryImplProvider);
      this.provideUseCaseLoadCurrenciesDataProvider = DoubleCheck.provider(new SwitchingProvider<UseCaseLoadCurrenciesDataFromNetwork>(singletonCImpl, 10));
      this.periodicFetchLatestRates_AssistedFactoryProvider = SingleCheck.provider(new SwitchingProvider<PeriodicFetchLatestRates_AssistedFactory>(singletonCImpl, 0));
      this.provideUseCaseFetchLatestPricesProvider = DoubleCheck.provider(new SwitchingProvider<UseCaseFetchLatestPrices>(singletonCImpl, 12));
      this.provideUseCaseFetchCurrenciesProvider = DoubleCheck.provider(new SwitchingProvider<UseCaseFetchCurrencies>(singletonCImpl, 13));
      this.provideConnectivityManagerProvider = DoubleCheck.provider(new SwitchingProvider<ConnectivityManager>(singletonCImpl, 15));
      this.networkInfoProviderImplProvider = new SwitchingProvider<>(singletonCImpl, 14);
      this.provideNetworkInfoProviderImplProvider = DoubleCheck.provider((Provider) networkInfoProviderImplProvider);
    }

    @Override
    public void injectCurrencyApp(CurrencyApp currencyApp) {
      injectCurrencyApp2(currencyApp);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private CurrencyApp injectCurrencyApp2(CurrencyApp instance) {
      CurrencyApp_MembersInjector.injectWorkerFactory(instance, hiltWorkerFactory());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.androidpoet.currencyconverter.features.defferable.PeriodicFetchLatestRates_AssistedFactory 
          return (T) new PeriodicFetchLatestRates_AssistedFactory() {
            @Override
            public PeriodicFetchLatestRates create(Context appContext,
                WorkerParameters workerParams) {
              return new PeriodicFetchLatestRates(appContext, workerParams, singletonCImpl.provideUseCaseloadLatestPricesProvider.get(), singletonCImpl.provideUseCaseLoadCurrenciesDataProvider.get());
            }
          };

          case 1: // com.androidpoet.domain.usecase.UseCaseLoadLatestPricesFromNetwork 
          return (T) UseCaseModule_ProvideUseCaseloadLatestPricesFactory.provideUseCaseloadLatestPrices(singletonCImpl.useCaseModule, singletonCImpl.provideLatestPricesRepositoryProvider.get());

          case 2: // com.androidpoet.data.repo.LatestPricesRepositoryImpl 
          return (T) new LatestPricesRepositoryImpl(singletonCImpl.provideCoroutineContextProvider.get(), singletonCImpl.provideCurrencyApiProvider.get(), singletonCImpl.provideCurrenciesLocalSourceProvider.get());

          case 3: // kotlin.coroutines.CoroutineContext 
          return (T) DataModule_ProvideCoroutineContextFactory.provideCoroutineContext(singletonCImpl.dataModule);

          case 4: // com.androidpoet.data.network.CurrencyAPIImpl 
          return (T) new CurrencyAPIImpl(singletonCImpl.provideNetworkClientProvider.get());

          case 5: // io.ktor.client.HttpClient 
          return (T) DataModule_ProvideNetworkClientFactory.provideNetworkClient(singletonCImpl.dataModule);

          case 6: // com.androidpoet.data.local.CurrenciesLocalSourceImpl 
          return (T) new CurrenciesLocalSourceImpl(singletonCImpl.provideCCDatabaseProvider.get(), singletonCImpl.provideCoroutineContextProvider.get(), singletonCImpl.provideDataStoreProvider.get(), singletonCImpl.providesNetworkJsonProvider.get());

          case 7: // com.androidpoet.data.local.CCDatabase 
          return (T) DataModule_ProvideCCDatabaseFactory.provideCCDatabase(singletonCImpl.dataModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 8: // androidx.datastore.core.DataStore<androidx.datastore.preferences.core.Preferences> 
          return (T) DataModule_ProvideDataStoreFactory.provideDataStore(singletonCImpl.dataModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 9: // kotlinx.serialization.json.Json 
          return (T) DataModule_Companion_ProvidesNetworkJsonFactory.providesNetworkJson();

          case 10: // com.androidpoet.domain.usecase.UseCaseLoadCurrenciesDataFromNetwork 
          return (T) UseCaseModule_ProvideUseCaseLoadCurrenciesDataFactory.provideUseCaseLoadCurrenciesData(singletonCImpl.useCaseModule, singletonCImpl.provideCurrenciesRepositoryProvider.get());

          case 11: // com.androidpoet.data.repo.CurrenciesRepositoryImpl 
          return (T) new CurrenciesRepositoryImpl(singletonCImpl.provideCoroutineContextProvider.get(), singletonCImpl.provideCurrencyApiProvider.get(), singletonCImpl.provideCurrenciesLocalSourceProvider.get());

          case 12: // com.androidpoet.domain.usecase.UseCaseFetchLatestPrices 
          return (T) UseCaseModule_ProvideUseCaseFetchLatestPricesFactory.provideUseCaseFetchLatestPrices(singletonCImpl.useCaseModule, singletonCImpl.provideLatestPricesRepositoryProvider.get());

          case 13: // com.androidpoet.domain.usecase.UseCaseFetchCurrencies 
          return (T) UseCaseModule_ProvideUseCaseFetchCurrenciesFactory.provideUseCaseFetchCurrencies(singletonCImpl.useCaseModule, singletonCImpl.provideCurrenciesRepositoryProvider.get());

          case 14: // com.androidpoet.currencyconverter.NetworkInfoProviderImpl 
          return (T) new NetworkInfoProviderImpl(singletonCImpl.provideConnectivityManagerProvider.get());

          case 15: // android.net.ConnectivityManager 
          return (T) DataModule_ProvideConnectivityManagerFactory.provideConnectivityManager(singletonCImpl.dataModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
